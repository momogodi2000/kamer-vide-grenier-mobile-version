# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Build debug APK"
  lane :build_debug do
    gradle(
      task: "assembleDebug",
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => "debug.keystore",
        "android.injected.signing.store.password" => "android",
        "android.injected.signing.key.alias" => "androiddebugkey",
        "android.injected.signing.key.password" => "android",
      }
    )
  end

  desc "Build release APK"
  lane :build_release do
    gradle(
      task: "assembleRelease",
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"],
      }
    )
  end

  desc "Build AAB for Google Play"
  lane :build_aab do
    gradle(
      task: "bundleRelease",
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"],
      }
    )
  end

  desc "Deploy to internal testing track on Google Play"
  lane :deploy_internal do
    build_aab
    upload_to_play_store(
      track: "internal",
      aab: "app/build/outputs/bundle/release/app-release.aab",
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end

  desc "Deploy to alpha testing track on Google Play"
  lane :deploy_alpha do
    build_aab
    upload_to_play_store(
      track: "alpha",
      aab: "app/build/outputs/bundle/release/app-release.aab",
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end

  desc "Deploy to beta testing track on Google Play"
  lane :deploy_beta do
    build_aab
    upload_to_play_store(
      track: "beta",
      aab: "app/build/outputs/bundle/release/app-release.aab"
    )
  end

  desc "Deploy to production on Google Play"
  lane :deploy_production do
    build_aab
    upload_to_play_store(
      track: "production",
      aab: "app/build/outputs/bundle/release/app-release.aab"
    )
    
    # Send success notification
    slack(
      message: "Successfully deployed Kamer Vide Grenier Android app to Google Play Store! ðŸŽ‰",
      channel: "#releases",
      success: true
    ) if ENV["SLACK_URL"]
  end

  desc "Increment version and deploy to production"
  lane :release do
    ensure_git_status_clean
    
    # Increment version
    increment_version_code
    increment_version_name(bump_type: "patch")
    
    # Build and deploy
    deploy_production
    
    # Commit version bump
    git_add(path: ".")
    git_commit(path: ".", message: "Version bump")
    push_to_git_remote
    
    # Create git tag
    add_git_tag(tag: "android/v#{get_version_name}")
    push_git_tags
  end
end